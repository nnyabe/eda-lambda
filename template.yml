AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
  EmailSubscribers:
    Type: String
    Default: "solomonchamamme@gmail.com"

Resources:
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub s3-upload-notifier-${EnvironmentName}-${AWS::AccountId}
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt NotificationLambda.Arn

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub s3-upload-notifications-${EnvironmentName}
      Subscription:
        - Endpoint: !Ref EmailSubscribers
          Protocol: email

  NotificationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: eda-lambda.handler.NotifyHandler::handleRequest
      Runtime: java17
      Timeout: 30
      MemorySize: 256
      FunctionName: !Sub s3-upload-notifier-lambda-${EnvironmentName}
      CodeUri: /eda-lambda
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref UploadBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationTopic.TopicName
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationTopic

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt UploadBucket.Arn

Outputs:
  BucketName:
    Value: !Ref UploadBucket
  LambdaFunctionName:
    Value: !Ref NotificationLambda
  SNSTopicArn:
    Value: !Ref NotificationTopic